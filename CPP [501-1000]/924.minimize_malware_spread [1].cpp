class Solution {
public:
    int bfs(vector<vector<int>>& graph, queue<int>& q, vector<bool>& visited){ // multi-source BFS
        int infected = 0;
        while(!q.empty())
        {
            int curr = q.front();
            q.pop();
            infected++;
            for(int nei: graph[curr])
            {
                if(visited[nei])
                    continue;
                visited[nei] = true;
                q.push(nei);
            }
        }
        return infected;
    }

    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        vector<vector<int>> adj(n);
        for(int i=0; i<n; i++) // build adjacency list
            for(int j=0; j<n; j++)
            {
                if(graph[i][j] == 0 || i == j)
                    continue;
                adj[i].push_back(j);
            }

        int minInfected = n; // assume all people get infected finally
        sort(initial.begin(), initial.end());
        int ans = initial[0];
        for(int i=0; i<initial.size(); i++)
        {
            vector<bool> visited(n, false);
            queue<int> q;
            for(int j=0; j<initial.size(); j++)
            {
                if(i == j) // assume the ith person is not infected initially
                    continue;
                visited[initial[j]] = true;
                q.push(initial[j]);
            }
            int currInfected = bfs(adj, q, visited);
            if(currInfected < minInfected)
            {
                minInfected = currInfected;
                ans = initial[i];
            }
        }
        return ans;
    }
};